# -*- coding: utf-8 -*-
# Generated by Django 1.9.10 on 2016-10-21 11:52
from __future__ import unicode_literals

import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sites', '0002_alter_domain_unique'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True, verbose_name='email address')),
                ('date_joined', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('gravatar', models.EmailField(blank=True, db_index=True, max_length=255, verbose_name='gravatar email')),
                ('profile_completion', models.IntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100), django.core.validators.MinValueValidator(0)])),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this corresponds to a validemail address. Deselect thisinstead of deleting accounts.', verbose_name='active')),
                ('is_disabled', models.BooleanField(default=False, verbose_name='disabled')),
                ('is_verified', models.BooleanField(default=False, help_text='User has verified this address and can access most My.jobs features. Deselect this instead of deleting accounts.', verbose_name='verified')),
                ('in_reserve', models.BooleanField(default=False, editable=False, help_text='This user will be held in reserve until any invitations associated with it are processed.', verbose_name='reserved')),
                ('opt_in_myjobs', models.BooleanField(default=True, help_text='Checking this allows My.jobs to send email updates to you.', verbose_name='Opt-in to non-account emails and Saved Search')),
                ('opt_in_employers', models.BooleanField(default=True, help_text='Checking this allows employers to send emails to you.', verbose_name='Email is visible to Employers')),
                ('last_response', models.DateField(blank=True, default=datetime.datetime.now)),
                ('password_change', models.BooleanField(default=False, verbose_name='Password must be changed on next login')),
                ('password_last_modified', models.DateTimeField(blank=True, default=None, help_text='When was the password last changed? Only used if the user is associated with a company which enforces password expiration.', null=True, verbose_name=b'Last modified time for the password.')),
                ('failed_login_count', models.IntegerField(default=0, verbose_name='Failed Login Count')),
                ('user_guid', models.CharField(db_index=True, max_length=100, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=255)),
                ('last_name', models.CharField(blank=True, max_length=255)),
                ('timezone', models.CharField(default=b'America/New_York', max_length=255)),
                ('source', models.CharField(default=b'https://secure.my.jobs', help_text='Site that initiated account creation', max_length=255)),
                ('deactivate_type', models.CharField(choices=[(b'none', b'none'), (b'dropped', b'dropped'), (b'bounce', b'bounce'), (b'unsubscribe', b'unsubscribe'), (b'spamreport', b'spamreport')], default=b'none', max_length=11)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('display_name', models.CharField(blank=True, max_length=50)),
                ('description', models.CharField(max_length=150)),
            ],
            options={
                'verbose_name_plural': 'Activities',
            },
        ),
        migrations.CreateModel(
            name='AppAccess',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyAccessRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(help_text=b"Name of the company you'd like access to.", max_length=200, verbose_name=b'Company Name')),
                ('access_code', models.CharField(max_length=32, verbose_name=b'Access Code')),
                ('requested_on', models.DateTimeField(auto_now_add=True, verbose_name=b'Requested On')),
                ('authorized_on', models.DateTimeField(null=True)),
                ('ticket', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CustomHomepage',
            fields=[
                ('site_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sites.Site')),
                ('logo_url', models.URLField(blank=True, null=True, verbose_name=b'Logo Image URL')),
                ('show_signup_form', models.BooleanField(default=True)),
            ],
            bases=('sites.site',),
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
                ('event', models.CharField(max_length=11)),
                ('received', models.DateField()),
                ('processed', models.BooleanField(default=False)),
                ('category', models.CharField(blank=True, max_length=255)),
                ('reason', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.CharField(max_length=255, verbose_name=b'Question')),
                ('answer', models.TextField(help_text=b'Answers allow use of HTML', verbose_name=b'Answer')),
                ('is_visible', models.BooleanField(default=True, verbose_name=b'Is visible')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='SecondPartyAccessRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('account_owner_email', models.EmailField(db_index=True, max_length=255, verbose_name='email address')),
                ('second_party_email', models.EmailField(db_index=True, max_length=255, verbose_name='email address')),
                ('submitted', models.DateTimeField(auto_now_add=True)),
                ('reason', models.TextField()),
                ('acted_on', models.DateTimeField(db_index=True, default=None, null=True)),
                ('accepted', models.BooleanField(default=False)),
                ('session_started', models.DateTimeField(default=None, null=True)),
                ('session_finished', models.DateTimeField(default=None, null=True)),
                ('expired', models.BooleanField(default=False)),
                ('account_owner', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('second_party', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Shared_Sessions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session', models.TextField(blank=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Ticket',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket', models.CharField(max_length=255)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPasswordHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('changed_on', models.DateTimeField(verbose_name=b'Password change on')),
                ('password_hash', models.CharField(max_length=128, verbose_name=b'Password hash')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
